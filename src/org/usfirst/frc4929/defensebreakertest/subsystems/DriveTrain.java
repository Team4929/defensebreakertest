// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4929.defensebreakertest.subsystems;

import org.usfirst.frc4929.defensebreakertest.RobotMap;
import org.usfirst.frc4929.defensebreakertest.commands.*;
import org.usfirst.frc4929.defensebreakertest.controllers.XboxController;
import org.usfirst.frc4929.defensebreakertest.controllers.XboxController.AxisType;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftFront = RobotMap.drivetrainLeftFront;
    SpeedController rightFront = RobotMap.drivetrainRightFront;
    SpeedController leftRear = RobotMap.drivetrainLeftRear;
    SpeedController rightRear = RobotMap.drivetrainRightRear;
    RobotDrive robotDrive41 = RobotMap.drivetrainRobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private double defaultSpeedModifier = 0.75;
    private boolean useTankDrive = true;
    private boolean useOneStickArcadeDrive = false;
    
    public DriveTrain() {
        super();
        robotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        robotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        robotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        robotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);        
    }    
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        setDefaultCommand(new DriveWithController());
    }
    
    public void tankDriveAuto(){
    	tankDrive(3,3,1);	
    }
    public void stopTankDrive(){
    	tankDrive(0,0,1);
    }
    
    public void driveWithXboxController(XboxController xBoxController) {
    	boolean isTurboPressed = false;//xBoxController.getTrigger(Hand.kRight);
    	double speedModifier = 0;
    			
    	if (isTurboPressed) {
    		speedModifier = 1;
    	} else {
    		speedModifier = this.defaultSpeedModifier;
    	}
    	
    	if (this.useTankDrive) {
    		tankDrive(xBoxController.getAxis(AxisType.kLeftY), xBoxController.getAxis(AxisType.kRightY), speedModifier);
    	} else {
    		arcadeDrive(xBoxController, speedModifier);
    	}

    }
    
    private void tankDrive(double leftStickValue, double rightStickValue, double speedModifier) {
    	robotDrive41.tankDrive(leftStickValue * speedModifier, rightStickValue * speedModifier);
    }
   
    private void arcadeDrive(XboxController xBoxController, double speedModifier) {
    	if (this.useOneStickArcadeDrive) {
    		robotDrive41.arcadeDrive(xBoxController, true);  // uses right stick only & full speed
    	} else {
        	robotDrive41.arcadeDrive(xBoxController.getAxis(AxisType.kLeftY) * speedModifier, xBoxController.getAxis(AxisType.kRightX) * speedModifier, true); 
    	}
    }
}


